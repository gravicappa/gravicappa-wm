(define-record-type <mwin>
  (make-mwin* window x y w h border old-x old-y old-w old-h old-border tags
              user-data-table)
  mwin?
  (name mwin-name set-mwin-name!)
  (window mwin-window)
  (tags mwin-tags set-mwin-tags!)
  (class mwin-class set-mwin-class!)

  (x mwin-x set-mwin-x!)
  (y mwin-y set-mwin-y!)
  (w mwin-w set-mwin-w!)
  (h mwin-h set-mwin-h!)
  (border mwin-border set-mwin-border!)

  (fixed? mwin-fixed? set-mwin-fixed!)
  (urgent? mwin-urgent? set-mwin-urgent!)
  (fullscreen? mwin-fullscreen? set-mwin-fullscreen!)
  (floating? mwin-floating? set-mwin-floating!)

  (basew mwin-basew set-mwin-basew!)
  (baseh mwin-baseh set-mwin-baseh!)
  (incw mwin-incw set-mwin-incw!)
  (inch mwin-inch set-mwin-inch!)
  (maxw mwin-maxw set-mwin-maxw!)
  (maxh mwin-maxh set-mwin-maxh!)
  (maxa mwin-maxa set-mwin-maxa!)
  (minw mwin-minw set-mwin-minw!)
  (minh mwin-minh set-mwin-minh!)
  (mina mwin-mina set-mwin-mina!)

  (old-x mwin-old-x set-mwin-old-x!)
  (old-y mwin-old-y set-mwin-old-y!)
  (old-w mwin-old-w set-mwin-old-w!)
  (old-h mwin-old-h set-mwin-old-h!)
  (old-border mwin-old-border set-mwin-old-border!)
  (old-floating mwin-old-floating? set-mwin-old-floating!)

  (user-data-table mwin-user-data-table))

(define screen-edge-width 32)
(define +mwin-input-mask+ (bitwise-ior x#+enter-window-mask+
                                       x#+focus-change-mask+
                                       x#+property-change-mask+
                                       x#+structure-notify-mask+))

(define (make-mwin window wa screen)
  (make-mwin* window
              (x-window-attributes-x wa)
              (x-window-attributes-y wa)
              (max (x-window-attributes-width wa) 0)
              (max (x-window-attributes-height wa) 0)
              0
              (x-window-attributes-x wa)
              (x-window-attributes-y wa)
              (max (x-window-attributes-width wa) 0)
              (max (x-window-attributes-height wa) 0)
              (x-window-attributes-border-width wa)
              '()
              (make-table)))

(define (mwin-user-data m key . args)
  (cond ((not (mwin? m)) #f)
        ((not (pair? args)) (table-ref (mwin-user-data-table m) key #f))
        (else (table-set! (mwin-user-data-table m) key (car args)))))

(define (move-to-mwin-top! m s)
  (screen-mwins-rm! m s)
  (screen-mwins-add! m s))

(define (move-to-stack-top! m s)
  (screen-stack-rm! m s)
  (screen-stack-add! m s))

(define (mwin-wants-fullscreen? mwin)
  (let ((state (x-get-window-property (current-display) (mwin-window mwin)
                                      (xatom "_NET_WM_STATE"))))
    (or (= (xatom "_NET_WM_STATE_FULLSCREEN") state)
        (and (= (mwin-w mwin) (screen-w (current-screen)))
             (= (mwin-h mwin) (screen-h (current-screen)))))))

(define (set-fullscreen m fs?)
  (let ((scr (current-screen)))
    (cond ((and fs? (not (mwin-fullscreen? m)))
           (x-change-property-atoms (current-display)
                                    (mwin-window m)
                                    (xatom "_NET_WM_STATE")
                                    (list (xatom "_NET_WM_STATE_FULLSCREEN")))
           (set-mwin-old-border! m (mwin-border m))
           (set-mwin-old-floating! m (mwin-floating? m))
           (set-mwin-border! m 0)
           (set-mwin-fullscreen! m #t)
           (set-mwin-floating! m #t)
           (resize
            m (screen-x scr) (screen-y scr) (screen-w scr) (screen-h scr))
           (x-raise-window (current-display) (mwin-window m)))
          (else
           (set-mwin-fullscreen! m #f)
           (set-mwin-floating! m (mwin-old-floating? m))
           (set-mwin-border! m (mwin-old-border m))
           (resize-w/hints
            m (mwin-old-x m) (mwin-old-y m) (mwin-old-w m) (mwin-old-h m))
           (x-change-property-atoms
            (current-display) (mwin-window m) (xatom "_NET_WM_STATE") '())
           (arrange-screen (current-display) scr)))))

(define (keep-rect-on-screen x y w h b s ret)
  (define (keep x w sx sw b pad)
    (cond ((< (+ x w (* 2 b)) (+ sx pad)) (- (+ pad sx) w (* 2 b)))
          ((> (- (+ x pad) b) (+ sx sw)) (- (+ sx sw) b pad))
          (else x)))
  (let ((pad screen-edge-width))
    (ret (keep x w (screen-x s) (screen-w s) b pad)
         (keep y h (screen-y s) (screen-h s) b pad))))

(define (center-mwin-on-rect m rect)
  (define (center a1 a2 ib1 ib2)
    (if (> (+ (- a1 (vector-ref rect ib1)) a2) (vector-ref rect ib2))
        (floor (+ (vector-ref rect ib1) (/ (- (vector-ref rect ib2) a2) 2)))
        a1))
  (let ((s (current-screen)))
    (set-mwin-x! m (center (mwin-x m) (mwin-w m) 0 2))
    (set-mwin-y! m (center (mwin-y m) (mwin-h m) 1 3))))

(define (center-mwin-on-screen m)
  (let ((s (current-screen)))
    (center-mwin-on-rect
     m (vector (screen-x s) (screen-y s) (screen-w s) (screen-h s)))))

(define (configure-mwin-window m)
  (let ((ev (make-x-event-box))
        (win (mwin-window m)))
    (set-x-configure-event-type! ev x#+configure-notify+)
    (set-x-configure-event-display! ev (current-display))
    (set-x-configure-event-window! ev win)
    (set-x-configure-event-event! ev win)
    (set-x-configure-event-x! ev (mwin-x m))
    (set-x-configure-event-y! ev (mwin-y m))
    (set-x-configure-event-width! ev (mwin-w m))
    (set-x-configure-event-height! ev (mwin-h m))
    (set-x-configure-event-border-width! ev (mwin-border m))
    (set-x-configure-event-above! ev x#+none+)
    (set-x-configure-event-override-redirect! ev #f)
    (x-send-event (current-display) win #f x#+structure-notify-mask+ ev)))

(define (update-size-hints m)
  (define (hint-set? flag hints)
    (not (zero? (bitwise-and (x-size-hints-flags hints) flag))))
  
  (define (set-base-size! m hints)
    (cond ((hint-set? x#+p-base-size+ hints)
           (set-mwin-basew! m (x-size-hints-base-width hints))
           (set-mwin-baseh! m (x-size-hints-base-height hints)))
          ((hint-set? x#+p-min-size+ hints)
           (set-mwin-basew! m (x-size-hints-min-width hints))
           (set-mwin-baseh! m (x-size-hints-min-height hints)))
          (else (set-mwin-basew! m 0)
                (set-mwin-baseh! m 0))))
  
  (define (set-inc! m hints)
    (cond ((hint-set? x#+p-resize-inc+ hints)
           (set-mwin-incw! m (x-size-hints-width-inc hints))
           (set-mwin-inch! m (x-size-hints-height-inc hints)))
          (else (set-mwin-incw! m 0)
                (set-mwin-inch! m 0))))
  
  (define (set-max-size! m hints)
    (cond ((hint-set? x#+p-max-size+ hints)
           (set-mwin-maxw! m (x-size-hints-max-width hints))
           (set-mwin-maxh! m (x-size-hints-max-height hints)))
          (else (set-mwin-maxw! m 0)
                (set-mwin-maxh! m 0))))
  
  (define (set-min-size! m hints)
    (cond ((hint-set? x#+p-min-size+ hints)
           (set-mwin-minw! m (x-size-hints-min-width hints))
           (set-mwin-minh! m (x-size-hints-min-height hints)))
          ((hint-set? x#+p-base-size+ hints)
           (set-mwin-minw! m (x-size-hints-base-width hints))
           (set-mwin-minh! m (x-size-hints-base-height hints)))
          (else (set-mwin-minw! m 0)
                (set-mwin-minh! m 0))))
  
  (define (set-aspect! m hints)
    (cond ((hint-set? x#+p-aspect+ hints)
           (set-mwin-mina! m
                           (if (positive? (x-size-hints-min-aspect-y hints))
                               (/ (x-size-hints-min-aspect-x hints)
                                  (x-size-hints-min-aspect-y hints))
                               0))
           (set-mwin-maxa! m
                           (if (positive? (x-size-hints-max-aspect-y hints))
                               (/ (x-size-hints-max-aspect-x hints)
                                  (x-size-hints-max-aspect-y hints))
                               0)))
          (else (set-mwin-mina! m 0)
                (set-mwin-maxa! m 0))))
  
  (let ((hints (x-get-wm-normal-hints (current-display) (mwin-window m))))
    (set-base-size! m hints)
    (set-inc! m hints)
    (set-max-size! m hints)
    (set-min-size! m hints)
    (set-aspect! m hints)
    (set-mwin-fixed! m
                     (and (positive? (mwin-maxw m))
                          (positive? (mwin-maxh m))
                          (positive? (mwin-minw m))
                          (positive? (mwin-minh m))
                          (= (mwin-maxw m) (mwin-minw m))
                          (= (mwin-maxh m) (mwin-minh m))))))

(define (update-wm-hints m)
  ;; TODO: process urgency hint
  #f)

(define (update-mwin-title m)
  (let ((strings (or (x-get-text-property-list (current-display)
                                               (mwin-window m)
                                               (xatom "_NET_WM_NAME"))
                     (x-get-text-property-list (current-display)
                                               (mwin-window m)
                                               x#+xa-wm-name+))))
    (if (pair? strings)
        (set-mwin-name! m (car strings)))))

(define (grab-buttons m)
  (let ((dpy (current-display))
        (mask (bitwise-ior x#+button-press-mask+ x#+button-release-mask+))
        (win (mwin-window m)))
    (x-ungrab-button dpy x#+any-button+ x#+any-modifier+ win)
    (do ((i 0 (+ i 1)))
        ((= i 32))
      (x-grab-button dpy
                     i
                     x#+any-modifier+
                     win
                     #f
                     mask
                     x#+grab-mode-sync+
                     x#+grab-mode-async+
                     x#+none+
                     x#+none+))))

(define (process-transient-for-hint m)
  (let ((tr (x-get-transient-for-hint (current-display) (mwin-window m))))
    (cond ((not (= tr x#+none+))
           (set-mwin-floating! m #t)
           (let ((parent (find-mwin tr)))
             (if parent
                 (set-mwin-tags! m (mwin-tags parent))))))))

(define (manage-mwin win m)
  (define (setup-geom dpy s m)
    (set-mwin-border! m border-width)
    (x-configure-window dpy win border-width: (mwin-border m))
    (x-set-window-border dpy win (get-colour dpy s border-colour))
    (keep-rect-on-screen (mwin-x m) (mwin-y m) (mwin-w m) (mwin-h m)
                         (mwin-border m) (current-screen)
                         (lambda (x y)
                           (set-mwin-x! m x)
                           (set-mwin-y! m y))))
  
  (let ((s (current-screen))
        (dpy (current-display))
        (fs? (mwin-wants-fullscreen? m)))
    (if (not fs?)
        (setup-geom dpy s m))
    (process-transient-for-hint m)
    (update-mwin-title m)
    (mwin-create-hook m (x-get-class-hint dpy win))
    (if (null? (mwin-tags m))
        (set-mwin-tags! m (list current-tag)))
    (update-tag-hook)
    (configure-mwin-window m)
    (if fs?
        (set-fullscreen m #t))
    (update-size-hints m)
    (x-select-input dpy win +mwin-input-mask+)
    (grab-buttons m)
    (set-mwin-floating! m (or (mwin-floating? m)
                              (mwin-fixed? m)
                              (mwin-fullscreen? m)))
    (set-mwin-old-floating! m (mwin-floating? m))
    (if (mwin-floating? m)
        (x-raise-window dpy win))
    (screen-mwins-add! m s)
    (if (not (memq m (screen-stack-list s)))
        (screen-stack-add! m s))
    (x-move-resize-window dpy
                          win
                          (+ (mwin-x m) (* 2 (screen-w s)))
                          (mwin-y m)
                          (mwin-w m)
                          (mwin-h m))
    (set-x-window-state! dpy win (xatom "WM_STATE") x#+normal-state+)
    (arrange-screen dpy s)
    (x-map-window dpy win)
    (focus-mwin dpy #f)))

(define (unmanage-mwin dpy m)
  (let ((w (mwin-window m))
        (s (current-screen)))
    (dynamic-wind
      (lambda ()
        (x-grab-server dpy)
        (set-x-error-handler! (lambda (dpy ev) #t)))
      (lambda ()
        (x-configure-window dpy w border-width: (mwin-old-border m))
        (screen-mwins-rm! m s)
        (screen-stack-rm! m s)
        (x-ungrab-button dpy x#+any-button+ x#+any-modifier+ w)
        (set-x-window-state! dpy w (xatom "WM_STATE") x#+withdrawn-state+))
      (lambda ()
        (x-sync dpy #f)
        (set-x-error-handler! wm-error-handler)
        (x-ungrab-server dpy)))
    (update-tag-hook)
    (arrange-screen dpy (current-screen))
    (x-sync dpy #f)))

(define (arrange-dimension dim dmin base dmax inc base-is-min?)
  (define (minimize dim) (max dim 1))
  (define (cut-base dim when?) (if when? (- dim base) dim))
  (define (adjust-inc dim) (if (positive? inc) (- dim (modulo dim inc)) dim))
  (define (restore-base dim) (+ dim base))
  (define (clamp dim) (if (positive? dmax) (min dim dmax) dim))
  (floor (clamp (max (restore-base (cut-base dim base-is-min?)) dmin))))

(define (adjust-aspect w h mina maxa ret)
  (if (and (positive? mina) (positive? maxa))
      (cond ((> (/ w h) maxa) (ret (* h maxa) h))
            ((< (/ w h) mina) (ret w (/ w mina)))
            (else (ret w h)))
      (ret w h)))

(define (apply-mwin-hints m w h ret)
  (let* ((border (mwin-border m))
         (basew (mwin-basew m))
         (maxw (mwin-maxw m))
         (minw (mwin-minw m))
         (incw (mwin-incw m))
         (baseh (mwin-baseh m))
         (maxh (mwin-maxh m))
         (minh (mwin-minh m))
         (inch (mwin-inch m))
         (maxa (mwin-maxa m))
         (mina (mwin-mina m))
         (base=min? (and (= basew minw) (= baseh minh))))
    (define (size-or-base v base)
      (let ((v (max v 1)))
        (if base=min?
            v
            (- v base))))
    (adjust-aspect
     (size-or-base w basew) (size-or-base h baseh) mina maxa
     (lambda (cw ch)
       (ret (arrange-dimension cw minw basew maxw incw base=min?)
            (arrange-dimension ch minh baseh maxh inch base=min?))))))

(define (clamp v size start end)
  (let ((v (if (> v (+ start end))
               (- (+ start end) size)
               v)))
    (if (< (+ v size) start)
        start
        v)))

(define (resize m x y w h)
  (set-mwin-old-x! m (mwin-x m))
  (set-mwin-old-y! m (mwin-y m))
  (set-mwin-old-w! m (mwin-w m))
  (set-mwin-old-h! m (mwin-h m))
  (set-mwin-x! m x)
  (set-mwin-y! m y)
  (set-mwin-w! m w)
  (set-mwin-h! m h)
  (x-configure-window (current-display)
                      (mwin-window m)
                      x: x
                      y: y
                      width: w
                      height: h
                      border-width: (mwin-border m))
  (configure-mwin-window m)
  (x-sync (current-display) #f))

(define (resize-w/hints m x y w h)
  (let* ((s (current-screen))
         (sx (screen-x s))
         (sy (screen-y s))
         (sw (screen-w s))
         (sh (screen-h s))
         (border (mwin-border m)))
    (apply-mwin-hints
     m w h
     (lambda (w h)
       (if (and (positive? w) (positive? h))
           (let ((x (floor (clamp x (+ w (* 2 border)) sx sw)))
                 (y (floor (clamp y (+ h (* 2 border)) sy sh)))
                 (w (floor (max w 16)))
                 (h (floor (max h 16))))
             (if (not (and (= (mwin-x m) x) (= (mwin-y m) y)
                           (= (mwin-w m) w) (= (mwin-h m) h)))
                 (resize m x y w h))))))))

(define (kill-mwin m)
  (define (has-delete-proto? m)
    (if m
        (member (xatom "WM_DELETE_WINDOW")
                (x-get-wm-protocols (current-display) (mwin-window m)))))

  (define (send-kill-message m)
    (let ((ev (make-x-event-box))
          (win (mwin-window m)))
      (set-x-mwin-message-event-type! ev x#+mwin-message+)
      (set-x-mwin-message-event-window! ev win)
      (set-x-mwin-message-event-message-type! ev (xatom "WM_PROTOCOLS"))
      (set-x-mwin-message-event-format! ev 32)
      (set-x-mwin-message-event-data-l! ev 0 (xatom "WM_DELETE_WINDOW"))
      (set-x-mwin-message-event-data-l! ev 1 x#+current-time+)
      (x-send-event (current-display) win #f x#+no-event-mask+ ev)))

  (if m
      (if (has-delete-proto? m)
          (send-kill-message m)
          (x-kill-mwin (current-display) (mwin-window m)))))
