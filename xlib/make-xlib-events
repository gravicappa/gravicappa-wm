#!/bin/sh

. ./functions
create_tags

common_fields='type serial send_event display window'
common_fields_re=`for f in $common_fields; do printf "\<$f\>|"; done \
                  | sed 's/|$//'`

events=`cut -f1 < "$tags" | grep -E '^X[A-Za-z]*Event' | grep -v XAnyEvent`

get_event_fields() {
	get_struct_fields $1 | grep -vE "$common_fields_re"
}

get_event_names() {
	sed -n "/m	union:_XEvent/p" < "$tags" \
	| sed -n 's/.*\(\<X[A-Za-z]*\>\) \([a-z]*\);.*/\1:\2/p'
}

get_event_field() {
	get_event_names | sed -n "/\<$1\>/p" | cut -d: -f2
}

make_event_accessor() {
	local ev="$1"
	local ev_field="$2"
	local field="$3"
	local type="$(get_field_type `get_struct_name $ev` $field)"
	local result='___result'

	# workarounds
	case "$field" in
		c_*) field=${field##c_} ;;
	esac
	local accessor="`lisp_name $ev-$field`"
	case "$type" in 
		*'*') result='___result_voidstar' ;;
		Bool) accessor="${accessor}?" ;;
	esac

	cat << ! | expand -t2 
(define $accessor
  (c-lambda (XEvent*) 
	          $type 
	          "$result = ___arg1->$ev_field.$field;"))

!
}

make_event_accessors() {
	ev="$1"
	field="`get_event_field $ev`"
	name=`get_struct_name $ev`
	for f in `get_event_fields $name`; do
		make_event_accessor $ev $field $f
	done
}

make_any_event_accessors() {
	ev=XAnyEvent
	field="`get_event_field $ev`"
	for f in $(get_struct_fields `get_struct_name XAnyEvent`) ; do
		make_event_accessor $ev $field $f
	done
}

#get_field_type `get_struct_name XAnyEvent` serial
#get_field_type `get_struct_name XAnyEvent` display
#get_field_type `get_struct_name XKeyEvent` x
#exit

cat << !
;; XAnyEvent slots accessors

`make_any_event_accessors`

!

for ev in $events ; do
	#echo `lisp_name $ev` struct: `get_struct_name $ev`
	#for f in $(get_struct_fields `get_struct_name $ev`); do
	#	echo " ." `lisp_name $f`
	#done
	if [ -n "$(get_struct_fields `get_struct_name $ev`)" ] ; then
		cat << !
;; $ev slots accessors

`make_event_accessors "$ev"`

!
	fi
done

