;(include "xlib/Xlib#.scm")

(define border-width 2)
(define border-color #xffccaa)

(define client-input-mask (bitwise-ior enter-window-mask
                                       focus-change-mask
                                       property-change-mask
                                       structure-notify-mask))

(define (make-client* window wa screen)
  (let ((client (make-client)))
    (client-screen-set! client screen)
    (client-window-set! client window)
    (client-x-set! client (x-window-attribute-x wa))
    (client-y-set! client (x-window-attribute-y wa))
    (client-w-set! client (x-window-attribute-width wa))
    (client-h-set! client (x-window-attribute-height wa))
    (client-old-border-set! client (x-window-attribute-border-width wa))))

(define (manage-client display window wa screen)
  (let ((c (make-client* window wa screen)))
    (cond ((client-wants-fullscreen? c)
           (fullscreen-client c))
          (else
            (client-border-set! c border-width)
            (hold-client-on-screen c)))
    (x-configure-window display window border-width: (client-border c))
    ;(x-set-window-border display window border-color)
    (configure-client c)
    (update-size-hints! c)
    (x-select-input display window client-input-mask)
    ;(grabbuttons c #f)
    ;(update-title! c)
    ;(process-transient-for-hint! c)
    (client-floating?-set! c (or (client-fixed? c) (client-fullscreen? c)))
    ;(tag-client (list current-view) c)
    (when (client-floating? c)
      (x-raise-window display (client-window c)))
    (screen-clients-set! screen (cons c (screen-clients screen)))
    (screen-focus-stack-set! screen (cons c (screen-focus-stack-set! screen)))
    (x-move-resize-client (client-window c)
                          (+ (client-x c)
                             (* 2 (screen-w screen)))
                          (client-y c)
                          (client-w c)
                          (client-h c))
    (x-map-window display (client-window c))
    (x-window-state-set! display window +wm-state+ +x-normal-state+)
    ;(arrange)
    ))

(define-x-event map-request (display window parent send-event?)
  (display-log "[x11] map-request window: " window)
	(unless (or send-event? (client-from-window* window))
		(let ((wa (x-get-window-attributes display window)))
			(unless (x-window-attribute-override-redirect? wa)
				(manage-window display window wa (find-screen parent))))))
