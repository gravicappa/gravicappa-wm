(define +ignored-modifiers+ (list x#+lock-mask+
                                  x#+mod2-mask+
                                  (bitwise-ior x#+lock-mask+ x#+mod2-mask+)))

(define +key-names+ '(("RET" . "Return")
                      ("ESC" . "Escape")
                      ("TAB" . "Tab")
                      ("DEL" . "BackSpace")
                      ("SPC" . "space")
                      ("!" . "exclam")
                      ("\"" . "quotedbl")
                      ("$" . "dollar")
                      ("%" . "percent")
                      ("&" . "ampersand")
                      ("'" . "apostrophe")
                      ("`" . "grave")
                      ("&" . "ampersand")
                      ("(" . "parenleft")
                      (")" . "parenright")
                      ("*" . "asterisk")
                      ("+" . "plus")
                      ("," . "comma")
                      ("-" . "minus")
                      ("." . "period")
                      ("/" . "slash")
                      (":" . "colon")
                      (";" . "semicolon")
                      ("<" . "less")
                      ("=" . "equal")
                      (">" . "greater")
                      ("?" . "question")
                      ("@" . "at")
                      ("[" . "bracketleft")
                      ("\\" . "backslash")
                      ("]" . "bracketright")
                      ("^" . "asciicircum")
                      ("_" . "underscore")
                      ("#" . "numbersign")
                      ("{" . "braceleft")
                      ("|" . "bar")
                      ("}" . "braceright")
                      ("~" . "asciitilde")))

(define bindings '())

(define (setup-window-bindings! win bindings)
  (x-ungrab-key (current-display) x#+any-key+ x#+any-modifier+ win)
  (for-each
    (lambda (key)
      (let ((code (x-keysym-to-keycode (current-display) (vector-ref key 1))))
        (if (and code (not (zero? (char->integer code))))
            (for-each
              (lambda (mod)
                (x-grab-key (current-display)
                            (char->integer code)
                            (bitwise-ior (vector-ref key 0) mod)
                            win
                            #t
                            x#+grab-mode-async+
                            x#+grab-mode-async+))
              (cons 0 +ignored-modifiers+)))))
    bindings))

(define (setup-bindings!)
  (do ((i 0 (+ i 1)))
      ((>= i (vector-length *screens*)))
    (setup-window-bindings! (screen-root (vector-ref *screens* i)) bindings)))

(define (keysym<-string s)
  (let ((name (assoc s +key-names+)))
    (x-string-to-keysym (if (pair? name)
                            (cdr name)
                            s))))

(define (bind-key mod key thunk)
  (set! bindings (cons (vector mod (keysym<-string key) thunk) bindings)))

(define (clean-mod mod)
  (bitwise-and mod (bitwise-not (apply bitwise-ior +ignored-modifiers+))))

(define (handle-keypress-event dpy key state)
  (let ((state (clean-mod state)))
    (let loop ((bindings bindings))
      (if (pair? bindings)
          (let ((b (car bindings)))
            (if (and (= state (vector-ref b 0)) (= key (vector-ref b 1)))
                (if (procedure? (vector-ref b 2))
                    ((vector-ref b 2)))
                (loop (cdr bindings))))))))
